<svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };
  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }
  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }
  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };
  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }
  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));
      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }
          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }
      return instantiate(_Blob, args); // arguments?
    }
    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }
    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);
  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M67.316 48.339l-18.47-18.605 2.05-10.097a4.655 4.655 0 001.66.319h.014a4.723 4.723 0 10-4.394-3.14l-10.85 1.325L19.628.35a1.166 1.166 0 00-.824-.35c-.306.002-.6.124-.817.34L14.68 3.63a1.167 1.167 0 000 1.65l1.78 1.805a32.686 32.686 0 005.511 38.638c.094.09.202.161.32.213a6.77 6.77 0 00-.114 1.197v13.534h-14A5.84 5.84 0 002.342 66.5v2.333c0 .645.523 1.167 1.167 1.167h53.667c.644 0 1.166-.522 1.166-1.167V66.5a5.84 5.84 0 00-5.833-5.833h-14v-5.998c2.193.46 4.428.694 6.669.7a32.483 32.483 0 0015.4-3.901l1.79 1.8c.216.221.513.347.823.35.306-.002.6-.124.817-.34l3.308-3.29a1.167 1.167 0 000-1.65zM50.925 13.635a2.333 2.333 0 111.645 3.987h-.008a2.333 2.333 0 01-1.633-3.987h-.004zM48.178 21.3l-1.309 6.444-2.571-2.587 3.88-3.857zm-1.325-1.973l-4.2 4.176-3.25-3.267 7.45-.909zM52.509 63a3.5 3.5 0 013.5 3.5v1.167H4.676V66.5a3.5 3.5 0 013.5-3.5h44.333zm-16.333-4.667v2.334H24.509v-2.334h11.667zM24.509 56v-8.867c0-2.83 2.617-5.133 5.833-5.133 3.217 0 5.834 2.303 5.834 5.133V56H24.509zm14-3.71v-5.157c0-4.117-3.663-7.466-8.167-7.466a8.312 8.312 0 00-7.177 3.907A30.34 30.34 0 0118.18 8.82l40.692 40.925a30.233 30.233 0 01-20.363 2.544zm24.695-1.496l-1.644-1.653L18.792 6.116l-1.65-1.655 1.65-1.645L36.15 20.272c.008 0 .013.015.021.021l28.688 28.856-1.655 1.645z" fill="#212121"/><path d="M30.353 44.333h-.01a3.5 3.5 0 00-.011 7h.01a3.5 3.5 0 10.01-7zm.816 4.328a1.167 1.167 0 11-.827-1.994 1.166 1.166 0 01.817 1.993h.01z" fill="#2196F3"/></svg>
